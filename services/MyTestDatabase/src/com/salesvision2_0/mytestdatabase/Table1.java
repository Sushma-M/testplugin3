/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesvision2_0.mytestdatabase;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PostPersist;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Table1 generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`table1`")
public class Table1 implements Serializable {

    private Integer id;
    private String column2;
    private List<Table2> table2s;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "`id`", nullable = false, scale = 0, precision = 10)
    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    @Column(name = "`column2`", nullable = false, length = 255)
    public String getColumn2() {
        return this.column2;
    }

    public void setColumn2(String column2) {
        this.column2 = column2;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "table1")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Table2> getTable2s() {
        return this.table2s;
    }

    public void setTable2s(List<Table2> table2s) {
        this.table2s = table2s;
    }

    @PostPersist
    public void onPostPersist() {
        if(table2s != null) {
            table2s.forEach(table2 -> table2.setTable1(this));
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Table1)) return false;
        final Table1 table1 = (Table1) o;
        return Objects.equals(getId(), table1.getId());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getId());
    }
}
