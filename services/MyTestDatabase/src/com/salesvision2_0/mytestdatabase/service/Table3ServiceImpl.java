/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesvision2_0.mytestdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision2_0.mytestdatabase.Table3;


/**
 * ServiceImpl object for domain model class Table3.
 *
 * @see Table3
 */
@Service("MyTestDatabase.Table3Service")
@Validated
public class Table3ServiceImpl implements Table3Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table3ServiceImpl.class);


    @Autowired
    @Qualifier("MyTestDatabase.Table3Dao")
    private WMGenericDao<Table3, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table3, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "MyTestDatabaseTransactionManager")
    @Override
    public Table3 create(Table3 table3) {
        LOGGER.debug("Creating a new Table3 with information: {}", table3);

        Table3 table3Created = this.wmGenericDao.create(table3);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(table3Created);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Table3 getById(Integer table3Id) {
        LOGGER.debug("Finding Table3 by id: {}", table3Id);
        return this.wmGenericDao.findById(table3Id);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Table3 findById(Integer table3Id) {
        LOGGER.debug("Finding Table3 by id: {}", table3Id);
        try {
            return this.wmGenericDao.findById(table3Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Table3 found with id: {}", table3Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public List<Table3> findByMultipleIds(List<Integer> table3Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Table3s by ids: {}", table3Ids);

        return this.wmGenericDao.findByMultipleIds(table3Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "MyTestDatabaseTransactionManager")
    @Override
    public Table3 update(Table3 table3) {
        LOGGER.debug("Updating Table3 with information: {}", table3);

        this.wmGenericDao.update(table3);
        this.wmGenericDao.refresh(table3);

        return table3;
    }

    @Transactional(value = "MyTestDatabaseTransactionManager")
    @Override
    public Table3 delete(Integer table3Id) {
        LOGGER.debug("Deleting Table3 with id: {}", table3Id);
        Table3 deleted = this.wmGenericDao.findById(table3Id);
        if (deleted == null) {
            LOGGER.debug("No Table3 found with id: {}", table3Id);
            throw new EntityNotFoundException(String.valueOf(table3Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "MyTestDatabaseTransactionManager")
    @Override
    public void delete(Table3 table3) {
        LOGGER.debug("Deleting Table3 with {}", table3);
        this.wmGenericDao.delete(table3);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Table3> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Table3s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Table3> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Table3s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service MyTestDatabase for table Table3 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public void export(ExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service MyTestDatabase for table Table3 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "MyTestDatabaseTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}
