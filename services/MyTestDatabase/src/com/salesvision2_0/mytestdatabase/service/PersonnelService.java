/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.salesvision2_0.mytestdatabase.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesvision2_0.mytestdatabase.Personnel;

/**
 * Service object for domain model class {@link Personnel}.
 */
public interface PersonnelService {

    /**
     * Creates a new Personnel. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Personnel if any.
     *
     * @param personnel Details of the Personnel to be created; value cannot be null.
     * @return The newly created Personnel.
     */
    Personnel create(@Valid Personnel personnel);


	/**
     * Returns Personnel by given id if exists.
     *
     * @param personnelId The id of the Personnel to get; value cannot be null.
     * @return Personnel associated with the given personnelId.
	 * @throws EntityNotFoundException If no Personnel is found.
     */
    Personnel getById(Integer personnelId);

    /**
     * Find and return the Personnel by given id if exists, returns null otherwise.
     *
     * @param personnelId The id of the Personnel to get; value cannot be null.
     * @return Personnel associated with the given personnelId.
     */
    Personnel findById(Integer personnelId);

	/**
     * Find and return the list of Personnels by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param personnelIds The id's of the Personnel to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Personnels associated with the given personnelIds.
     */
    List<Personnel> findByMultipleIds(List<Integer> personnelIds, boolean orderedReturn);


    /**
     * Updates the details of an existing Personnel. It replaces all fields of the existing Personnel with the given personnel.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Personnel if any.
     *
     * @param personnel The details of the Personnel to be updated; value cannot be null.
     * @return The updated Personnel.
     * @throws EntityNotFoundException if no Personnel is found with given input.
     */
    Personnel update(@Valid Personnel personnel);

    /**
     * Deletes an existing Personnel with the given id.
     *
     * @param personnelId The id of the Personnel to be deleted; value cannot be null.
     * @return The deleted Personnel.
     * @throws EntityNotFoundException if no Personnel found with the given id.
     */
    Personnel delete(Integer personnelId);

    /**
     * Deletes an existing Personnel with the given object.
     *
     * @param personnel The instance of the Personnel to be deleted; value cannot be null.
     */
    void delete(Personnel personnel);

    /**
     * Find all Personnels matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Personnels.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Personnel> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Personnels matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Personnels.
     *
     * @see Pageable
     * @see Page
     */
    Page<Personnel> findAll(String query, Pageable pageable);

    /**
     * Exports all Personnels matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Personnels matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see ExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(ExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Personnels in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Personnel.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}
